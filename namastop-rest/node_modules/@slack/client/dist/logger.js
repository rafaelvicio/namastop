"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log = require("loglevel");
const util_1 = require("./util");
let instanceCount = 0;
/**
 * Severity levels for log entries
 */
var LogLevel;
(function (LogLevel) {
    LogLevel["ERROR"] = "error";
    LogLevel["WARN"] = "warn";
    LogLevel["INFO"] = "info";
    LogLevel["DEBUG"] = "debug";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
/**
 * INTERNAL interface for getting or creating a named Logger.
 */
function getLogger(name) {
    // Get a unique ID for the logger.
    const instanceId = instanceCount;
    instanceCount += 1;
    // Set up the logger.
    const logger = log.getLogger(name + instanceId);
    // Wrap the original method factory with one that prepends custom information.
    const originalFactory = logger.methodFactory;
    logger.methodFactory = (methodName, logLevel, loggerName) => {
        const logMessage = originalFactory(methodName, logLevel, loggerName);
        // return a LoggingMethod
        return (...msg) => {
            // Prepend some info to the log message.
            const segments = [`[${methodName.toUpperCase()}]`, loggerName].concat(msg);
            // Daisy chain with the original method factory.
            logMessage.apply(undefined, segments);
        };
    };
    return logger;
}
exports.getLogger = getLogger;
/**
 * Decides whether `level` is more severe than the `threshold` for logging. When this returns true, logs should be
 * output.
 *
 * @param level log level to check
 * @param threshold lower bound on severity, expressed as a number inside the loglevel package
 */
function isMoreSevere(level, threshold) {
    if (level === LogLevel.DEBUG) {
        return threshold <= 1;
    }
    if (level === LogLevel.INFO) {
        return threshold <= 2;
    }
    if (level === LogLevel.WARN) {
        return threshold <= 3;
    }
    if (level === LogLevel.ERROR) {
        return threshold <= 4;
    }
    return true;
}
/**
 * INTERNAL function for transforming an external LoggingFunc type into the internal Logger interface.
 */
function loggerFromLoggingFunc(name, loggingFunc) {
    // Get a unique ID for the logger.
    const instanceId = instanceCount;
    instanceCount += 1;
    // Set up the logger.
    const logger = log.getLogger(name + instanceId);
    // Set the method factory to reroute logs to the provided log function.
    logger.methodFactory = (methodName, logLevel, loggerName) => {
        if (isMoreSevere(methodName, logLevel)) {
            return (...msg) => {
                loggingFunc(methodName, `${loggerName} ${msg.map(m => JSON.stringify(m)).join(' ')}`);
            };
        }
        return util_1.noop;
    };
    return logger;
}
exports.loggerFromLoggingFunc = loggerFromLoggingFunc;
//# sourceMappingURL=logger.js.map